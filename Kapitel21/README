
In this homework, you'll be investigating swap performance with a simple
program found in mem.c. The program is really simple: it just allocates an
array of integers of a certain size, and then proceeds to loop through it
(repeatedly), incrementing each value in the array. 

Type "make" to build it (and look at the file Makefile for details about how
the build works).

Then, type "./mem" followed by a number to run it. The number is the size (in
MB) of the array. Thus, to run with a small array (size 1 MB):

prompt> ./mem 1

and to run with a larger array (size 1 GB):

prompt> ./mem 1024

The program prints out the time it takes to go through each loop as well as
the bandwidth (in MB/s). Bandwidth is particularly interesting to know as it
gives you a sense of how fast the system you're using can move through data;
on modern systems, this is likely in the GB/s range. 

Here is what the output looks like for a typical run:

prompt> ./mem 1000
allocating 1048576000 bytes (1000.00 MB)
  number of integers in array: 262144000
loop 0 in 448.11 ms (bandwidth: 2231.61 MB/s)
loop 1 in 345.38 ms (bandwidth: 2895.38 MB/s)
loop 2 in 345.18 ms (bandwidth: 2897.07 MB/s)
loop 3 in 345.23 ms (bandwidth: 2896.61 MB/s)
^C
prompt> 

The program first tells you how much memory it allocated (in bytes, MB, and in
the number of integers), and then starts looping through the array. The first
loop (in the example above) took 448 milliseconds; because the program
accessed the 1000 MB in just under half a second, the computed bandwidth is
(not surprisingly) just over 2000 MB/s. 

The program continues by doing the same thing over and over, for loops 1, 2,
etc. 

Important: to stop the program, you must kill it. This task is accomplished on
Linux (and all Unix-based systems) by typing control-C (^C) as shown above.

Note that when you run with small array sizes, each loop's performance numbers
won't be printed. For example:

prompt>  ./mem 1
allocating 1048576 bytes (1.00 MB)
  number of integers in array: 262144
loop 0 in 0.71 ms (bandwidth: 1414.61 MB/s)
loop 607 in 0.33 ms (bandwidth: 3039.35 MB/s)
loop 1215 in 0.33 ms (bandwidth: 3030.57 MB/s)
loop 1823 in 0.33 ms (bandwidth: 3039.35 MB/s)
^C
prompt> 

In this case, the program only prints out a sample of outputs, so as not to
flood the screen with too much output. 

The code itself is simple to understand. The first important part is a memory
allocation: 

    // the big memory allocation happens here
    int *x = malloc(size_in_bytes);

Then, the main loop begins:

    while (1) {
	x[i++] += 1; // main work of loop done here.

The rest is just timing and printing out information. See mem.c for details.

Much of the homework revolves around using the tool vmstat to monitor what is
happening with the system. Read the vmstat man page (type "man vmstat") for
details on how it works, and what each column of output means.


Question 1:

1) The US (tune spent running in non-kernel mode) geht von 0 zu 50
und die ID (time spent idle) verändert sich zu 50 von 80-100 
2) Macht Sinn da wir ein Programm ausführen und das nur den non-kernel beansprucht
3) VErändert sich nicht wenn mehrere Instanzen ausgeführt werden (Bleibt bei 50)

 5  0 506768 1281236      0 261592    0    0   540   100 4657 5636 22  0 78  0  0
 1  0 506768 1281204      0 261624    0    0     0    40 3356 4274 29  0 71  0  0
 4  0 506768 1271028      0 261624    0    0     0   100 2476 4995 39  0 61  0  0
 3  0 506768 1281308      0 261624    0    0     0   112 3354 4215 37  0 63  0  0
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 2  0 506768 1281120      0 261624    0    0     0    76 2437 3856 29  0 71  0  0
 8  0 506768 1277420      0 261624    0    0     0    72 2766 3728 42  0 58  0  0
 3  0 506768 1280012      0 261624    0    0     0    36 3171 3760 50  0 50  0  0
 5  0 506768 1280084      0 261624    0    0     0   144 2642 3609 50  0 50  0  0


Question 2:

1) Die SWPD (amount of virtual memory used) bleibt gleich
Der unbenutze Speicher "Free (amount of idle memory)" geht runter wenn man das Programm startet und geht
wieder zurück wenn man das Programm beendet
2) "Free" ändert sich sofort auf die ursprüngliche Menge zurück
 3  0 506024 223224      0 262156    0    0     0   156 2661 3677 42  0 58  0  0
 4  0 506024 223288      0 262156    0    0     0     8 2845 3673 28  0 72  0  0
 1  0 506024 1263812      0 262156    0    0     0    28 2582 3327 21  0 79  0  0
 1  0 506024 1274224      0 262156    0    0     0   108 2496 3356 10  0 90  0  0
3) Es geht wieder auf den alten Wert zurück

Question 3:

1) Mit ./mem 1850 fängt es an zu Swappen
2) Der erste Loop dauert immer länger als die anderen Loops die darauf folgen
3) 
 5  1 874932    120      0  34496    4 6404    80  6596 3416 3475 35  0 65  0  0
 1  0 876612  21512      0  34392   20 1240   128  1276 3208 3410 28  0 72  0  0
4)

Question 4:

1) Die I/O Statistics steigen auch wenn die SWAP steigen und die ID bleibt die ganze Zeit bei ca. 100

Question 5:

1) Loop 0 Geht Lange, Danach Schnell
loop 0 in 957.89 ms (bandwidth: 1043.96 MB/s)
loop 1 in 408.55 ms (bandwidth: 2447.71 MB/s)
loop 2 in 432.06 ms (bandwidth: 2314.49 MB/s)
loop 3 in 333.90 ms (bandwidth: 2994.88 MB/s)
loop 4 in 816.42 ms (bandwidth: 1224.87 MB/s)
loop 5 in 1012.11 ms (bandwidth: 988.04 MB/s)
loop 6 in 400.26 ms (bandwidth: 2498.37 MB/s)
loop 7 in 360.41 ms (bandwidth: 2774.59 MB/s)
loop 8 in 328.18 ms (bandwidth: 3047.12 MB/s)
loop 9 in 335.47 ms (bandwidth: 2980.87 MB/s)
loop 10 in 320.51 ms (bandwidth: 3120.04 MB/s)
loop 11 in 317.74 ms (bandwidth: 3147.21 MB/s)
loop 12 in 319.54 ms (bandwidth: 3129.53 MB/s)
loop 13 in 323.69 ms (bandwidth: 3089.36 MB/s)
loop 14 in 347.51 ms (bandwidth: 2877.58 MB/s)
loop 15 in 337.72 ms (bandwidth: 2961.01 MB/s)

2) Loop 0 geht sehr lange und die danach noch Länger
loop 0 in 46297.30 ms (bandwidth: 64.80 MB/s)
loop 1 in 236187.63 ms (bandwidth: 12.70 MB/s)

3) Bandwith ist beim ersten viel Schneller als beim zweiten Versuch

4) Die Performance ist viel schlechter beim Swappin als wenn alles in Speicher passt

5) Je Größer mem desto kleine Bandwith und anders herum

6) Wenn alles in Speicher passt braucht die erste Loop am längsten und die darauffolgenden wieder kurz.
Beim Swapping brauch die erste Loop am kürzesten und die anderen brauchen immer länger

Question 6:

Wenn die Size des Swapped überschritten wird, wird das Programm gekillt
